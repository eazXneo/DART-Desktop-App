# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Regression Tests

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: macos-13  # TODO: for now

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.10"
        # Optional - x64 or x86 architecture, defaults to x64
        # architecture: 'x64'
    # You can test your matrix by printing the current Python version
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        # brew install python-tk@3.10
        brew update
        brew install tcl-tk
        echo 'export PATH="/usr/local/opt/tcl-tk/bin:$PATH"' >> ~/.zshrc
        export LDFLAGS="-L/usr/local/opt/tcl-tk/lib"
        export CPPFLAGS="-I/usr/local/opt/tcl-tk/include"
        export PKG_CONFIG_PATH="/usr/local/opt/tcl-tk/lib/pkgconfig"
        brew install pyenv --head
        python --version >> py_ver
        sed -i '' "s/Python //g" py_ver
        export PY_VER="$( cat py_ver )"
        env \
        PATH="$(brew --prefix tcl-tk)/bin:$PATH" \
        LDFLAGS="-L$(brew --prefix tcl-tk)/lib" \
        CPPFLAGS="-I$(brew --prefix tcl-tk)/include" \
        PKG_CONFIG_PATH="$(brew --prefix tcl-tk)/lib/pkgconfig" \
        CFLAGS="-I$(brew --prefix tcl-tk)/include" \
        PYTHON_CONFIGURE_OPTS="--with-tcltk-includes='-I$(brew --prefix tcl-tk)/include' --with-tcltk-libs='-L$(brew --prefix tcl-tk)/lib -ltcl8.6 -ltk8.6'" \
        pyenv install $PY_VER
        pyenv global $PY_VER
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
